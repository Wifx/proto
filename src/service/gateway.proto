syntax = "proto3";

package helium;

import "blockchain_state_channel_v1.proto";
import "blockchain_txn_state_channel_close_v1.proto";
import "blockchain_txn_poc_receipts_v2.proto";

enum close_state {
  close_state_closable = 0;
  close_state_closing = 1;
  close_state_closed = 2;
  close_state_dispute = 3;
}

/* general */

message empty {
}

message gateway_success_resp {
  bytes resp = 1;
  bytes details = 2;
}

message gateway_error_resp {
  bytes error = 1;
  bytes details = 2;
}

message gateway_stream_req_v1 {
  oneof msg {
    gateway_sc_follow_req_v1 follow_req = 1;
    gateway_routing_req_v1 routing_req = 2;
    gateway_poc_req_v1 poc_req = 3;
  }
}

message gateway_resp_v1 {
  uint64 height = 1;
  bytes signature = 2;
  oneof msg {
    gateway_success_resp success_resp = 3;
    gateway_error_resp error_resp = 4;
    gateway_sc_is_active_resp_v1 is_active_resp = 5;
    gateway_sc_is_overpaid_resp_v1 is_overpaid_resp = 6;
    gateway_sc_close_resp_v1 close_resp = 7;
    gateway_sc_follow_streamed_resp_v1 follow_streamed_resp = 8;
    gateway_routing_streamed_resp_v1 routing_streamed_resp = 9;
    gateway_poc_challenge_notification_resp_v1 poc_challenge_resp = 10;
    gateway_poc_check_challenge_target_resp_v1 poc_check_target_resp = 11;
    gateway_public_routing_data_resp_v1 public_route = 12;
    gateway_poc_region_params_resp_v1 poc_region_params_resp = 13;
  }
}

/* state channels */

message gateway_sc_is_active_req_v1 {
  bytes sc_id = 1;
  bytes sc_owner = 2;
}

message gateway_sc_is_active_resp_v1 {
  bytes sc_id = 1;
  bytes sc_owner = 2;
  bool active = 3;
}

message gateway_sc_is_overpaid_req_v1 {
  bytes sc_id = 1;
  bytes sc_owner = 2;
  uint64 total_dcs = 3;
}

message gateway_sc_is_overpaid_resp_v1 {
  bytes sc_id = 1;
  bytes sc_owner = 2;
  bool overpaid = 3;
}

message gateway_sc_close_req_v1 {
  blockchain_txn_state_channel_close_v1 close_txn = 1;
}
message gateway_sc_close_resp_v1 {
  bytes sc_id = 1;
  bytes response = 2;
}

message gateway_sc_follow_req_v1 {
  bytes sc_id = 1;
  bytes sc_owner = 2;
}
message gateway_sc_follow_streamed_resp_v1 {
  bytes sc_id = 1;
  bytes sc_owner = 2;
  close_state close_state = 3;
}

/* routing */

message routing {
  uint32 oui = 1;
  bytes owner = 2;
  repeated routing_address addresses = 3;
  repeated bytes filters = 4;
  repeated bytes subnets = 5;
}

message routing_address {
  bytes pub_key = 1;
  bytes uri = 2;
}

message gateway_routing_req_v1 { uint64 height = 1; }
message gateway_routing_streamed_resp_v1 { repeated routing routings = 1; }

/* POCs */

message gateway_poc_req_v1 {
  bytes address = 1;                                              // address of the requesting gateway
  bytes signature = 2;                                            // signed payload of the request
}

// streaming notification sent by a validator to a light gateway to notify it of a new challenge
message gateway_poc_challenge_notification_resp_v1 {
  routing_address challenger = 1;                     // routing info of the challenging validator
  bytes block_hash = 2;                               // block hash of the block which contains the POC request
  bytes onion_key_hash = 3;                           // Hash of the POC onion key
}

// request sent by a light gateway to a challenging validator to check if they are the target
message gateway_poc_check_challenge_target_req_v1 {
  bytes address = 1;                                  // address of the challengee
  bytes challenger = 2;                                // address of the challenger
  bytes block_hash = 3;                               // block hash provided by the notifying validator in the 'gateway_poc_challenge_notification_resp_v1' msg
  bytes onion_key_hash = 4;                           // Hash of the POC key
  uint64 height = 5;                                  // height provided by the notifying validator in the 'gateway_poc_challenge_notification_resp_v1' msg
  bytes notifier = 6;                                 // address of the notifying validator, derived from the 'gateway_poc_challenge_notification_resp_v1' msg
  bytes notifier_sig = 7;                             // the signature payload derived from the 'gateway_resp_v1' msg containing the 'gateway_poc_challenge_notification_resp_v1' msg
  bytes challengee_sig = 8;                           // the challengee signed request payload
}

message gateway_poc_region_params_req_v1 {
  bytes region = 1;                                   // region to return params for
}
message gateway_poc_region_params_resp_v1 {
  bytes region = 1;                                   // the specified region from the request
  bytes params = 2;                                   // the params for the specified region
}

// response to the requestor's 'gateway_poc_check_challenge_target_req_v1' request if the requestor is the target
message gateway_poc_check_challenge_target_resp_v1 {
  bool target = 1;
  bytes onion = 2;
}

// request sent by a light gateway to a consensus group member containing the observing gateways receipt or witness report
message gateway_poc_report_req_v1 {
  bytes onion_key_hash = 1;                        // Hash of the POC key derived from the observed packet
  oneof msg {                                      // the signed receipt or witness report from the observing GWs
    blockchain_poc_receipt_v1 receipt = 2;
    blockchain_poc_witness_v1 witness = 3;
  }
}

// request to translate the specified pubkeybin to the assocaited nodes public grpc routing data
message gateway_address_routing_data_req_v1 {
  bytes address = 1;                        // pubkeybin of the address to return routing data for
}

// request to translate the specified POC onion key the to the associated challengers public grpc routing data
message gateway_poc_key_routing_data_req_v1 {
  bytes key = 1;                        // onion key of the POC to return routing data for
}

message gateway_public_routing_data_resp_v1 {
  bytes address = 1;                                  // pubkeybin of the requested address
  routing_address public_uri = 2;                     // public routing info of the challenging validator
}


/* Gateway Service */

service gateway {
  rpc stream(stream gateway_stream_req_v1) returns (stream gateway_resp_v1);
  rpc is_active_sc(gateway_sc_is_active_req_v1) returns (gateway_resp_v1);
  rpc is_overpaid_sc(gateway_sc_is_overpaid_req_v1) returns (gateway_resp_v1);
  rpc close_sc(gateway_sc_close_req_v1) returns (gateway_resp_v1);

  rpc check_challenge_target(gateway_poc_check_challenge_target_req_v1) returns (gateway_resp_v1);
  rpc send_report(gateway_poc_report_req_v1) returns (gateway_resp_v1);
  rpc address_to_public_uri(gateway_address_routing_data_req_v1) returns (gateway_resp_v1);
  rpc poc_key_to_public_uri(gateway_poc_key_routing_data_req_v1) returns (gateway_resp_v1);
  rpc region_params(gateway_poc_region_params_req_v1) returns (gateway_resp_v1);
}